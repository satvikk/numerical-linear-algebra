stop("not a square matrix of n>3")
n <- ncol(A)
L <- matrix(as.numeric(NA), nrow = n, ncol = n)
L[1,1] <- sqrt(A[1,1])
L[-1,1] <- A[-1,1]/L[1,1]
for(i in 1:(ncol(A)-1)){
L[i,i] <- sqrt(A[i,i] - sum(L[i,-(i:n)]^2) )
L[-(1:i),i] <- c(A[-(1:i),i,drop=F] - L[-(1:i),1:(i-1),drop=F] %*% t(L[i,1:(i-1),drop=F]))
}
L[n,n] <- sqrt(A[n,n] - sum(L[n,-n]^2) )
L[is.na(L)] <- 0
return(L)
}
cholesky1(A)
A
L[-1,1]
A = matrix(runif(100), ncol = 10, nrow = 10)
A = A %*% t(A)
if(class(A) != "matrix")
stop(paste0("found ",class(A), ", expected matrix"))
if((ncol(A) != nrow(A)) | nrow(A) <= 3)
stop("not a square matrix of n>3")
n <- ncol(A)
L <- matrix(as.numeric(NA), nrow = n, ncol = n)
L[1,1] <- sqrt(A[1,1])
L[-1,1] <- A[-1,1]/L[1,1]
L
cholesky1 <- function(A){
if(class(A) != "matrix")
stop(paste0("found ",class(A), ", expected matrix"))
if((ncol(A) != nrow(A)) | nrow(A) <= 3)
stop("not a square matrix of n>3")
n <- ncol(A)
L <- matrix(as.numeric(NA), nrow = n, ncol = n)
L[1,1] <- sqrt(A[1,1])
L[-1,1] <- A[-1,1]/L[1,1]
for(i in 2:(ncol(A)-1)){
L[i,i] <- sqrt(A[i,i] - sum(L[i,-(i:n)]^2) )
L[-(1:i),i] <- c(A[-(1:i),i,drop=F] - L[-(1:i),1:(i-1),drop=F] %*% t(L[i,1:(i-1),drop=F]))
}
L[n,n] <- sqrt(A[n,n] - sum(L[n,-n]^2) )
L[is.na(L)] <- 0
return(L)
}
cholesky1(A)
mat <- matrix(runif(100), ncol = 10, nrow = 10)
A <- mat %*% t(mat)
mat <- matrix(runif(100), ncol = 10, nrow = 10)
mat <- mat %*% t(mat)
l_cho = cholesky1(mat)
mat <- matrix(runif(100), ncol = 10, nrow = 10)
mat <- mat %*% t(mat)
l_cho = cholesky1(mat)
l_cho
mat
mat <- mat %*% t(mat)
mat
l_cho = cholesky1(mat)
l_cho
mat <- matrix(runif(100), ncol = 10, nrow = 10)
mat <- mat %*% t(mat)
l_cho = cholesky1(mat)
l_cho
is.na(NaN)
cholesky1 <- function(A){
if(class(A) != "matrix")
stop(paste0("found ",class(A), ", expected matrix"))
if((ncol(A) != nrow(A)) | nrow(A) <= 3)
stop("not a square matrix of n>3")
n <- ncol(A)
L <- matrix(as.numeric(NA), nrow = n, ncol = n)
L[1,1] <- sqrt(A[1,1])
L[-1,1] <- A[-1,1]/L[1,1]
for(i in 2:(ncol(A)-1)){
L[i,i] <- sqrt(A[i,i] - sum(L[i,-(i:n)]^2) )
L[-(1:i),i] <- c(A[-(1:i),i,drop=F] - L[-(1:i),1:(i-1),drop=F] %*% t(L[i,1:(i-1),drop=F]))
}
L[n,n] <- sqrt(A[n,n] - sum(L[n,-n]^2) )
#L[is.na(L)] <- 0
return(L)
}
mat <- matrix(runif(100), ncol = 10, nrow = 10)
mat <- mat %*% t(mat)
l_cho = cholesky1(mat)
l_cho
cholesky1 <- function(A){
if(class(A) != "matrix")
stop(paste0("found ",class(A), ", expected matrix"))
if((ncol(A) != nrow(A)) | nrow(A) <= 3)
stop("not a square matrix of n>3")
n <- ncol(A)
L <- matrix(as.numeric(NA), nrow = n, ncol = n)
L[1,1] <- sqrt(A[1,1])
L[-1,1] <- A[-1,1]/L[1,1]
for(i in 2:(ncol(A)-1)){
L[i,i] <- sqrt(A[i,i] - sum(L[i,-(i:n)]^2) )
L[-(1:i),i] <- c(A[-(1:i),i,drop=F] - L[-(1:i),1:(i-1),drop=F] %*% t(L[i,1:(i-1),drop=F]))
}
L[n,n] <- sqrt(A[n,n] - sum(L[n,-n]^2) )
L[is.na(L)] <- 0
return(L)
}
mat <- matrix(runif(100), ncol = 10, nrow = 10)
mat <- mat %*% t(mat)
l_cho = cholesky1(mat)
l_cho
norm((lcho %*% t(l_cho)) - mat, "F")
norm((l_cho %*% t(l_cho)) - mat, "F")
mat <- matrix(runif(100), ncol = 10, nrow = 10)
mat <- mat %*% t(mat)
l_cho = cholesky1(mat)
norm((l_cho %*% t(l_cho)) - mat, "F")
l_cho %*% t(l_cho)) - mat
(l_cho %*% t(l_cho)) - mat
cholesky1 <- function(A){
if(class(A) != "matrix")
stop(paste0("found ",class(A), ", expected matrix"))
if((ncol(A) != nrow(A)) | nrow(A) <= 3)
stop("not a square matrix of n>3")
n <- ncol(A)
L <- matrix(as.numeric(NA), nrow = n, ncol = n)
L[1,1] <- sqrt(A[1,1])
L[-1,1] <- A[-1,1]/L[1,1]
for(i in 2:(ncol(A)-1)){
L[i,i] <- sqrt(A[i,i] - sum(L[i,-(i:n)]^2) )
L[-(1:i),i] <- c(A[-(1:i),i,drop=F] - L[-(1:i),1:(i-1),drop=F] %*% t(L[i,1:(i-1),drop=F]))
}
L[n,n] <- sqrt(A[n,n] - sum(L[n,-n]^2) )
L[is.na(L)] <- 0
return(L)
}
mat <- matrix(runif(100), ncol = 10, nrow = 10)
mat <- mat %*% t(mat)
l_cho = cholesky1(mat)
norm((l_cho %*% t(l_cho)) - mat, "F")
l_cho
norm((l_cho %*% t(l_cho)) - mat, "F")
(l_cho %*% t(l_cho)) - mat
cholesky1 <- function(A){
if(class(A) != "matrix")
stop(paste0("found ",class(A), ", expected matrix"))
if((ncol(A) != nrow(A)) | nrow(A) <= 3)
stop("not a square matrix of n>3")
n <- ncol(A)
L <- matrix(as.numeric(NA), nrow = n, ncol = n)
L[1,1] <- sqrt(A[1,1])
L[-1,1] <- A[-1,1]/L[1,1]
for(i in 2:(ncol(A)-1)){
L[i,i] <- sqrt(A[i,i] - sum(L[i,-(i:n)]^2) )
L[-(1:i),i] <- c(A[-(1:i),i,drop=F] - L[-(1:i),1:(i-1),drop=F] %*% t(L[i,1:(i-1),drop=F]))/L[i,i]
}
L[n,n] <- sqrt(A[n,n] - sum(L[n,-n]^2) )
L[is.na(L)] <- 0
return(L)
}
mat <- matrix(runif(100), ncol = 10, nrow = 10)
mat <- mat %*% t(mat)
l_cho = cholesky1(mat)
norm((l_cho %*% t(l_cho)) - mat, "F")
l_cho
cholesky_r <- function(A){
if(class(A) != "matrix")
stop(paste0("found ",class(A), ", expected matrix"))
if((ncol(A) != nrow(A)) | nrow(A) <= 3)
stop("not a square matrix of n>3")
n = ncol(A)
L = matrix(as.numeric(NA), nrow = n, ncol = n)
L[1,1] = sqrt(A[1,1])
L[-1,1] = A[-1,1]/L[1,1]
for(i in 2:(ncol(A)-1)){
L[i,i] = sqrt(A[i,i] - sum(L[i,-(i:n)]^2) )
L[-(1:i),i] = c(A[-(1:i),i,drop=F] - L[-(1:i),1:(i-1),drop=F] %*% t(L[i,1:(i-1),drop=F]))/L[i,i]
}
L[n,n] = sqrt(A[n,n] - sum(L[n,-n]^2) )
L[is.na(L)] = 0
return(L)
}
mat = matrix(runif(100), ncol = 10, nrow = 10)
mat = mat %*% t(mat)
l_cho = cholesky_r(mat)
norm((l_cho %*% t(l_cho)) - mat, "F")
cholesky_r <- function(A){
if(class(A) != "matrix")
stop(paste0("found ",class(A), ", expected matrix"))
if((ncol(A) != nrow(A)) | nrow(A) <= 3)
stop("not a square matrix of n>3")
n = ncol(A)
L = matrix(as.numeric(NA), nrow = n, ncol = n)
L[1,1] = sqrt(A[1,1])
L[-1,1] = A[-1,1]/L[1,1]
for(i in 2:(ncol(A)-1)){
L[i,i] = sqrt(A[i,i] - sum(L[i,-(i:n)]^2) )
L[-(1:i),i] = c(A[-(1:i),i,drop=F] - L[-(1:i),1:(i-1),drop=F] %*% t(L[i,1:(i-1),drop=F]))/L[i,i]
}
L[n,n] = sqrt(A[n,n] - sum(L[n,-n]^2) )
L[is.na(L)] = 0
return(L)
}
set.seed(84)
mat = matrix(rnorm(100), ncol = 10, nrow = 10)
mat = mat %*% t(mat)
l_cho = cholesky_r(mat)
norm((l_cho %*% t(l_cho)) - mat, "F")
l_cho
library(Rcpp)
library(magrittr)
library(microbenchmark)
set.seed(84)
mat = matrix(rnorm(600^2), ncol = 600, nrow = 600)
mat = mat %*% t(mat)
#base::chol pivot=F----
l_cho = chol(mat)
norm((t(l_cho) %*% l_cho) - mat, "F")
# cholesky_r ----
source("cholesky_r.R")
l_cho = cholesky_r(mat)
norm((l_cho %*% t(l_cho)) - mat, "F")
#cholesky_cpp ----
sourceCpp("cholesky_cpp.cpp")
l_cho = cholesky_cpp(mat)
norm((l_cho %*% t(l_cho)) - mat, "F")
#microbenchmarking ----
set.seed(42)
mbc = list()
nns = c(2:8)*100
ns = lapply(nns, function(z) matrix(rnorm(z^2), nrow = z) %>% (function(zz) zz %*% t(zz)))
for(i in 1:length(ns)){
print(i)
mat3 = ns[[i]]
mbc[[i]] = microbenchmark(chol(mat3), cholesky_r(mat3), cholesky_cpp(mat3)) %>% summary
}
mbc_df = sapply(mbc, `[[`, "median") %>% t %>% cbind(nns,.) %>% as.data.frame %>% `names<-`(c("n", "base", "r", "cpp"))
mbc_df2 = cbind(mbc_df, sapply(mbc_df[,-1], function(z) z/(mbc_df$n^2)))
names(mbc_df2) = c("n",'base','r','cpp','base_adj','r_adj','cpp_adj')
mbc_df2
x = rnorm(10)
u = rnorm(10)
?norm
norm_vec <- function(x) sqrt(sum(x^2))
u = u/norm_vec(u)
?identity()
P = diag(1,nrow = n) - 2*(matrix(u) %*% t(matrix(u))
n = 10
x = rnorm(n)
u = rnorm(n)
norm_vec <- function(x) sqrt(sum(x^2))
u = u/norm_vec(u)
P = diag(1,nrow = n) - 2*(matrix(u) %*% t(matrix(u)))
P
n = 10
x = rnorm(n)
u = rnorm(n)
norm_vec <- function(x) sqrt(sum(x^2))
u = u/norm_vec(u)
P = diag(1,nrow = n) - 2*(matrix(u) %*% t(matrix(u)))
reflex = P %*% x
reflex
n = 10
x = rnorm(n)
u = rnorm(n)
norm_vec <- function(x) sqrt(sum(x^2))
u = u/norm_vec(u)
P = diag(1,nrow = n) - 2*(matrix(u) %*% t(matrix(u)))
reflex = c(P %*% x)
reflex
householder_r = function(x, u) c(diag(1,nrow = length(u)) - 2*(matrix(u) %*% t(matrix(u))))
householder_r(1:3, rep(sqrt(3),3))
householder_r = function(x, u){
c(diag(1,nrow = length(u)) - 2*(matrix(u) %*% t(matrix(u))))
}
householder_r(1:3, rep(sqrt(3),3))
householder_r(1:10, (1:10) %>% function(z) z/sqrt(sum(z^2)))
householder_r(1:10, (1:10) %>% (function(z) z/sqrt(sum(z^2))))
x = 1:10
y= (2:11) %>% (function(z) z/sqrt(sum(z^2)))
u= (2:11) %>% (function(z) z/sqrt(sum(z^2)))
householder_r = function(x, u){
c(diag(1,nrow = length(u)) - 2*(matrix(u) %*% t(matrix(u))))
}
householder_r(x,u)
diag(1,nrow = length(u)
)
2*(matrix(u) %*% t(matrix(u)))
householder_r = function(x, u){
c(diag(1,nrow = length(u)) - 2*(matrix(u) %*% t(matrix(u))) %*% x)
}
householder_r(x,u)
householder_r = function(x, u){
c(diag(1,nrow = length(u)) - 2*(matrix(u) %*% t(matrix(u))) %*% matrix(x))
}
householder_r(x,u)
matrix(x)
householder_r = function(x, u){
P = diag(1,nrow = length(u)) - 2*(matrix(u) %*% t(matrix(u)))
return(P %*% matrix(x))
}
householder_r(x,u)
A = rnorm(500, ncol = 10)
A = matrix(rnorm(500), ncol = 10))
A = matrix(rnorm(500), ncol = 10)
A
for(i in 1:(ncol(A) - 1)){
print(i)
}
i=1
householder_r = function(x, u){
P = diag(1,nrow = length(u)) - 2*(matrix(u) %*% t(matrix(u)))
return(list(P=P, x_reflec = P %*% matrix(x)))
}
sqrt(sum(x^2))
x
u = x - sqrt(sum(x^2))*c(1,rep(0,length(x)-1))
u
householder2_r = function(x){
u = x - sqrt(sum(x^2))*c(1,rep(0,length(x)-1))
householder_r(x, u)
}
qs = list()
as = list()
n = ncol(A)
A[i:n,i]
A
m = nrow(A)
qs = list()
as = list()
n = ncol(A)
m = nrow(A)
qs[[i]] = householder_r2(A[i:m,i])$P
householder_r = function(x, u){
P = diag(1,nrow = length(u)) - 2*(matrix(u) %*% t(matrix(u)))
return(list(P=P, x_reflec = P %*% matrix(x)))
}
householder2_r = function(x){
u = x - sqrt(sum(x^2))*c(1,rep(0,length(x)-1))
householder_r(x, u)
}
householder_r2(A[i:m,i])$P
householder2_r(A[i:m,i])$P
set.seed(4)
A = matrix(rnorm(500), ncol = 10)
set.seed(4)
A = matrix(rnorm(500), ncol = 10)
qs = list()
as = list()
n = ncol(A)
m = nrow(A)
for(i in 1:(n - 1)){
qs[[i]] = householder2_r(A[i:m,i])$P
A = qs[[i]] %*% A
}
i
i = 1
qs = list()
as = list()
n = ncol(A)
m = nrow(A)
qs[[i]] = householder2_r(A[i:m,i])$P
A = qs[[i]] %*% A
qr_r = function(A){
qs = list()
as = list()
n = ncol(A)
m = nrow(A)
for(i in 1:(n - 1)){
qs[[i]] = diag(1, nrow = m)
qs[[i]][i:m,i:m] = householder2_r(A[i:m,i])$P
A = qs[[i]] %*% A
}
}
set.seed(4)
A = matrix(rnorm(500), ncol = 10)
qs = list()
as = list()
n = ncol(A)
m = nrow(A)
for(i in 1:(n - 1)){
qs[[i]] = diag(1, nrow = m)
qs[[i]][i:m,i:m] = householder2_r(A[i:m,i])$P
A = qs[[i]] %*% A
}
A
qs[[9]]
qs[[1]]
qs[[2]]
qs[[3]]
qs[[4]]
l2norm = function(x) sqrt(sum(x^2))
l2norm(2)
l2norm(2:5)
l2norm(3:4)
l2norm(c(5,12))
x
l2norm(x)
l2norm(householder_r(x)$x_reflec)
l2norm(householder2_r(x)$x_reflec)
l2norm = function(x) sqrt(sum(x^2))
householder_r = function(x, u){
P = diag(1,nrow = length(u)) - 2*(matrix(u) %*% t(matrix(u)))
return(list(P=P, x_reflec = P %*% matrix(x)))
}
householder2_r = function(x){
u = x - l2norm(x)*c(1,rep(0,length(x)-1))
u = u/l2norm(u)
householder_r(x, u)
}
householder_r = function(x, u){
P = diag(1,nrow = length(u)) - 2*(matrix(u) %*% t(matrix(u)))
return(list(P=P, x_reflec = P %*% matrix(x)))
}
householder2_r = function(x){
l2norm = function(x) sqrt(sum(x^2))
u = x - l2norm(x)*c(1,rep(0,length(x)-1))
u = u/l2norm(u)
householder_r(x, u)
}
qr_r = function(A){
qs = list()
as = list()
n = ncol(A)
m = nrow(A)
for(i in 1:(n - 1)){
qs[[i]] = diag(1, nrow = m)
qs[[i]][i:m,i:m] = householder2_r(A[i:m,i])$P
A = qs[[i]] %*% A
}
}
set.seed(4)
A = matrix(rnorm(500), ncol = 10)
qs = list()
as = list()
n = ncol(A)
m = nrow(A)
for(i in 1:(n - 1)){
qs[[i]] = diag(1, nrow = m)
qs[[i]][i:m,i:m] = householder2_r(A[i:m,i])$P
A = qs[[i]] %*% A
}
A
set.seed(4)
A = matrix(rnorm(500), ncol = 10)
qs = list()
as = list()
n = ncol(A)
m = nrow(A)
for(i in 1:(n)){
qs[[i]] = diag(1, nrow = m)
qs[[i]][i:m,i:m] = householder2_r(A[i:m,i])$P
A = qs[[i]] %*% A
}
A
qs[[1]]
qs[[9]]
qr_r = function(A){
qs = list()
as = list()
n = ncol(A)
m = nrow(A)
for(i in 1:(n)){
qs[[i]] = diag(1, nrow = m)
qs[[i]][i:m,i:m] = householder2_r(A[i:m,i])$P
A = qs[[i]] %*% A
}
q = qs[[n]]
for(i in 1:(n-1)){
q = q %*% q[[i]]
}
}
set.seed(4)
A = matrix(rnorm(500), ncol = 10)
qr_r = function(A){
qs = list()
as = list()
n = ncol(A)
m = nrow(A)
for(i in 1:(n)){
qs[[i]] = diag(1, nrow = m)
qs[[i]][i:m,i:m] = householder2_r(A[i:m,i])$P
A = qs[[i]] %*% A
}
q = qs[[n]]
for(i in 1:(n-1)){
q = q %*% q[[i]]
}
return(list(q = q, r = A))
}
set.seed(4)
A = matrix(rnorm(500), ncol = 10)
myqr = qr_r(A)
qr_r = function(A){
qs = list()
as = list()
n = ncol(A)
m = nrow(A)
for(i in 1:(n)){
qs[[i]] = diag(1, nrow = m)
qs[[i]][i:m,i:m] = householder2_r(A[i:m,i])$P
A = qs[[i]] %*% A
}
q = qs[[n]]
for(i in 1:(n-1)){
q = q %*% qs[[i]]
}
return(list(q = q, r = A))
}
set.seed(4)
A = matrix(rnorm(500), ncol = 10)
myqr = qr_r(A)
myqr$q
myqr$q %>% dim
myqr$r %>% dim
norm(A - myqr$q %*% myqr$r, "F")
norm(A - matrix(mean(A), nrow =nrow(A), ncol=ncol(A)), "F")
