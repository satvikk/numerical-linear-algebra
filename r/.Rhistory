}
A[lower.tri(A)] = 0
return(list(q = t(q), r = A))
}
mm = matrix(runif(16),4)
mysol = qr_r(mm)
rsol = qr(mm)
u
A = mm
n = ncol(A)
m = nrow(A)
q = diag(1,nrow = m, ncol = m)
u = householder3_r(A[i:m,i])
A[i:m,i:m] = A[i:m,i:m] - 2 * matrix(u) %*% (t(matrix(u)) %*% A[i:m,i:m])
q = (diag(m) - 2 * matrix(u) %*% t(matrix(u))) %*% q
q
qr_r = function(A){
n = ncol(A)
m = nrow(A)
q = diag(1,nrow = m, ncol = m)
for(i in 1:n){
u = householder3_r(A[i:m,i])
A[i:m,i:m] = A[i:m,i:m] - 2 * matrix(u) %*% (t(matrix(u)) %*% A[i:m,i:m])
q = (diag(m) - 2 * matrix(u) %*% t(matrix(u))) %*% q
}
A[lower.tri(A)] = 0
return(list(q = t(q), r = A))
}
mm = matrix(runif(16),4)
mysol = qr_r(mm)
rsol = qr(mm)
qr_r = function(A){
n = ncol(A)
m = nrow(A)
q = diag(1,nrow = m, ncol = m)
for(i in 1:n){
u = householder3_r(A[i:m,i])
A[i:m,i:m] = A[i:m,i:m] - 2 * matrix(u) %*% (t(matrix(u)) %*% A[i:m,i:m])
q[i:m,] = q[i:m,] - 2 * matrix(u) %*% (t(matrix(u)) %*% q[i:m,])
}
A[lower.tri(A)] = 0
return(list(q = t(q), r = A))
}
mm = matrix(runif(16),4)
mysol = qr_r(mm)
rsol = qr(mm)
rsol = list(q = qr.Q(rsol), r = qr.R(rsol))
mysol$r - rsol$r
mysol$q - rsol$q
mysol$q + rsol$q
mysol$q %*% mysol$r
(mysol$q %*% mysol$r) - mm
((mysol$q %*% mysol$r) - mm) %>% norm("F")
#microbenchmarking qr ----
set.seed(42)
mbc = list()
nns = c(2:8)*100
ns = lapply(nns, function(z) matrix(rnorm(z^2), nrow = z) %>% (function(zz) zz %*% t(zz)))
for(i in 1:length(ns)){
print(i)
mat3 = ns[[i]]
mbc[[i]] = microbenchmark(qr(mat3), qr_r(mat3)) %>% summary
}
mbc_df = sapply(mbc, `[[`, "median") %>% t %>% cbind(nns,.) %>% as.data.frame %>% `names<-`(c("n", "base", "r"))
mbc_df2 = cbind(mbc_df, sapply(mbc_df[,-1], function(z) z/(mbc_df$n^2)))
names(mbc_df2) = c("n",'base','r','base_adj','r_adj')
mbc_df2
mbc_df2$r/mbc_df2$base
#microbenchmarking qr ----
set.seed(42)
mbc = list()
nns = c(2:18)*10
ns = lapply(nns, function(z) matrix(rnorm(z^2), nrow = z) %>% (function(zz) zz %*% t(zz)))
for(i in 1:length(ns)){
print(i)
mat3 = ns[[i]]
mbc[[i]] = microbenchmark(qr(mat3), qr_r(mat3)) %>% summary
}
mbc_df = sapply(mbc, `[[`, "median") %>% t %>% cbind(nns,.) %>% as.data.frame %>% `names<-`(c("n", "base", "r"))
mbc_df2 = cbind(mbc_df, sapply(mbc_df[,-1], function(z) z/(mbc_df$n^2)))
names(mbc_df2) = c("n",'base','r','base_adj','r_adj')
mbc_df2
mbc_df2$r/mbc_df2$base
sourceCpp("qr_cpp.cpp")
library(Rcpp)
sourceCpp("qr_cpp.cpp")
mm = matrix(runif(20),5)
csol = qr_cpp(mm)
cans = csol$q %*% csol$r
cdif = mm - cans
cdif
csol$q
csol$r
sourceCpp("qr_cpp.cpp")
mm = matrix(runif(20),5)
csol = qr_cpp(mm)
cans = csol$q %*% csol$r
cdif = mm - cans
csol$r
library(Rcpp)
sourceCpp("qr_cpp.cpp")
mm = matrix(runif(20),5)
csol = qr_cpp(mm)
cans = csol$q %*% csol$r
cdif = mm - cans
csol$r
library(Rcpp)
sourceCpp("qr_cpp.cpp")
mm = matrix(runif(20),5)
csol = qr_cpp(mm)
cans = csol$q %*% csol$r
cdif = mm - cans
csol$r
library(Rcpp)
sourceCpp("qr_cpp.cpp")
mm = matrix(runif(20),5)
csol = qr_cpp(mm)
cans = csol$q %*% csol$r
cdif = mm - cans
csol$r
library(Rcpp)
sourceCpp("qr_cpp.cpp")
mm = matrix(runif(20),5)
csol = qr_cpp(mm)
cans = csol$q %*% csol$r
cdif = mm - cans
csol$r
}
return List::create(Named("q") = transpose(q) , Named("r") = A);
}
library(Rcpp)
sourceCpp("qr_cpp.cpp")
mm = matrix(runif(20),5)
csol = qr_cpp(mm)
cans = csol$q %*% csol$r
cdif = mm - cans
cdif
csol$r
csol$q
cans
mm
mm = matrix(runif(20),5)
csol = qr_cpp(mm)
mm
mm = matrix(runif(20),5)
mm
csol = qr_cpp(mm)
mm
mm = matrix(runif(20),5)
csol = qr_cpp(mm)
cans = csol$q %*% csol$r
cdif = mm - cans
cdif
csol$r
library(Rcpp)
sourceCpp("qr_cpp.cpp")
mm = matrix(runif(20),5)
csol = qr_cpp(mm)
cans = csol$q %*% csol$r
cdif = mm - cans
cdif
cans
csol$q
csol$r
mm = matrix(runif(25),5)
csol = qr_cpp(mm)
cans = csol$q %*% csol$r
cdif = mm - cans
cdif
mm = matrix(runif(20),5)
csol = qr_cpp(mm)
cans = csol$q %*% csol$r
cdif = mm - cans
cdif
csol$r
mm = matrix(runif(25),5)
csol = qr_cpp(mm)
cans = csol$q %*% csol$r
cdif = mm - cans
cdif
csol$q
csol$r
library(Rcpp)
sourceCpp("qr_cpp.cpp")
mm = matrix(runif(25),5)
csol = qr_cpp(mm)
cans = csol$q %*% csol$r
cdif = mm - cans
csol$r
csol$q
library(Rcpp)
sourceCpp("qr_cpp.cpp")
mm = matrix(runif(35),7)
csol = qr_cpp(mm)
cans = csol$q %*% csol$r
cdif = mm - cans
csol$r
cdif
m = 2000
n = 500
mns = matrix(rnorm(m*n), nrow = m, ncol = n)
prt = proc.time()
invisible(qr(mns))
prt = proc.time() - prt
prt
library(Rcpp)
library(magrittr)
library(microbenchmark)
#qr_decomposition_r ----
source("qr_r.R")
#qr_decomposition_cpp ----
sourceCpp("qr_cpp.cpp")
m = 2000
n = 500
mns = matrix(rnorm(m*n), nrow = m, ncol = n)
prtb = proc.time()
invisible(qr(mns))
prtb = proc.time() - prtb
prtb
prtr = proc.time()
invisible(qr_r(mns))
prtr = proc.time() - prtr
prtr
prtc = proc.time()
invisible(qr_cpp(mns))
prtc = proc.time() - prtc
prtc
prtc/prtb
m = 200
n = 50
mns = matrix(rnorm(m*n), nrow = m, ncol = n)
prtb = proc.time()
invisible(qr(mns))
prtb = proc.time() - prtb
prtc = proc.time()
invisible(qr_cpp(mns))
prtc = proc.time() - prtc
prtc
prtb
prtc/prtb
m = 1000
n = 400
mns = matrix(rnorm(m*n), nrow = m, ncol = n)
prtb = proc.time()
invisible(qr(mns))
prtb = proc.time() - prtb
prtc = proc.time()
invisible(qr_cpp(mns))
prtc = proc.time() - prtc
prtc/prtb
m = 3000
n = 1000
mns = matrix(rnorm(m*n), nrow = m, ncol = n)
prtb = proc.time()
invisible(qr(mns))
prtb = proc.time() - prtb
prtb
prtc = proc.time()
invisible(qr_cpp(mns))
prtc = proc.time() - prtc
prtc/prtb
library(Rcpp)
library(magrittr)
mm = matrix(rnorm(50), ncol = 5)
mm
sourceCpp("back_sub_cpp.cpp")
back_sub_cpp(mm)
back_sub_cpp(mm, 1:10, 1:5)
back_sub_cpp(mm, 1:5, 1:10)
mm[lower.tri(mm)] = 0
mm
mm = matrix(rnorm(25), ncol = 5)
mm[lower.tri(mm)] = 0
mm
solve(m)
solve(mm)
?backsolve()
x = matrix(rnorm(5))
x
mm
bsol = backsolve(mm, x)
bsol
solve(mm) %*% x
x = matrix(rnorm(10), ncol = 2)
bsol = backsolve(mm, x)
bsol
solve(mm) %*% x
library(Rcpp)
library(magrittr)
sourceCpp("back_sub_cpp.cpp")
mm = matrix(rnorm(25), ncol = 5)
mm[lower.tri(mm)] = 0
x = matrix(rnorm(10), ncol = 2)
bsol = backsolve(mm, x)
csol = back_sub_cpp(mm, x)
bsol
csol
csol-bsol
mm = matrix(rnorm(35), ncol = 5)
mm[lower.tri(mm)] = 0
x = matrix(rnorm(10), ncol = 2)
bsol = backsolve(mm, x)
bsol
csol
csol = back_sub_cpp(mm, x)
mm
solve(mm)
mm = matrix(rnorm(25), ncol = 5)
mm[lower.tri(mm)] = 0
x = matrix(rnorm(10), ncol = 2)
mm
solve(mm)
diag(1,2,3,)
diag(1,2)
diag(2)
diag(5)
diag(mm)
bsoli = backsolve(mm, diag(nrow(mm)))
bsoli
solve(mm)
solve(mm) - bsoli
csoli = back_sub_cpp(mm, x)
csoli = back_sub_cpp(mm, diag(nrow(mm))
csoli = back_sub_cpp(mm, diag(nrow(mm)))
csoli = back_sub_cpp(mm, diag(nrow(mm)))
solve(mm) - csoli
(x * tx)-1 * tx * y
(q * r * tr * tq)-1 * tr * tq * y
(tx * x)-1 * tx * y
(tr * tq * q * r)-1 * tr * tq * y
(tr * r)-1 * tr * tq * y
(tx * x) * B = tx * y
(tr * tq * q * r) * B = tr * tq * y
(tr * r) * B = tr * tq * y
r * B = tq * y
sourceCpp("lm_cpp.cpp")
lm_cpp(matrix(1:4(,1:4)))
lm_cpp(matrix((1:4),1:4)))
lm_cpp(matrix((1:4),1:4))
lm_cpp(matrix(1:4),1:4)
r * B = tq * y
sourceCpp("lm_cpp.cpp")
sourceCpp("lm_cpp.cpp")
r * B = tq * y
csol = qr_cpp(mm)
csol$q
csol$r
mm = matrix(runif(50), ncol = 5)
csol = qr_cpp(mm)
csol
csol$q - lm_cpp(mm,1:10)
sourceCpp("lm_cpp.cpp")
mm = matrix(runif(50), ncol = 5)
csol = qr_cpp(mm)
t(csol$q) - lm_cpp(mm,1:10)
sourceCpp("lm_cpp.cpp")
r * B = tq * y
sourceCpp("lm_cpp.cpp")
mm = matrix(runif(50), ncol = 5)
y = 1:10
csol = lm_cpp(mm, y)
sourceCpp("lm_cpp.cpp")
mm = matrix(runif(50), ncol = 5)
y = 1:10
csol = lm_cpp(mm, y)
csol
mm
y
mm %*% matrix(csol)
library(Rcpp)
library(magrittr)
sourceCpp("lm_cpp.cpp")
mm = matrix(runif(50), ncol = 5)
y = 1:10
mm
csol
csol = lm_cpp(mm, y)
mmr = mm
mmr[lower.tri(mm)] = 0
mmr
back_sub_cpp(mmr,1:10)
back_sub_cpp(mmr,matrix(1:10))
back_sub_cpp(mmr[1:5,],matrix(1:10))
mmr[1:5,]
back_sub_cpp(mmr[1:5,1:10],matrix(1:10))
back_sub_cpp(mmr[1:5,1:5],matrix(1:10))
mmr2 = mmr[1:5,]
back_sub_cpp(mmr2,matrix(1:10))
sourceCpp("back_sub_cpp.cpp")
mm = matrix(runif(50), ncol = 5)
y = 1:10
mmr = mm
mmr[lower.tri(mm)] = 0
back_sub_cpp(mmr2,matrix(1:10))
back_sub_cpp(mmr,matrix(1:10))
mmr
back_sub_cpp(mmr[1:5,],matrix(1:10))
back_sub_cpp(mmr[1:5,],matrix(1:5))
r * B = tq * y
%>%
` %>% `
`%>%`
mmqr = qr(mm)
m
mm
mmq = qr.Q(mmqr)
t(mmq) %*% matrix(y)
mmr = qr.Q(mmr)
mmr = mm
mmr[lower.tri(mm)] = 0
back_sub_cpp(mmr[1:5,],matrix(1:5))
mmqrr = qr.R(mmr)
mmqrr = qr.R(mmqr)
mmqrq = qr.Q(mmqr)
mmqrr = qr.R(mmqr)
solve(mmqrr)
mmqrr
r * B = tq * y
mn * n1 = mm * m1
nn * n1 = nm * m1
library(Rcpp)
library(magrittr)
sourceCpp("lm_cpp.cpp")
sourceCpp("back_sub_cpp.cpp")
mm = matrix(runif(50), ncol = 5)
y = 1:10
mmr = mm
mmr[lower.tri(mm)] = 0
mmr
mm
mmrsq = mm[1:nrow(mm),]
mmrsq
mmrsq = mm[1:ncol(mm),]
mmrsq
mmrsq = mmR[1:ncol(mm),]
mmrsq = mmr[1:ncol(mm),]
mmrsq
mmr
mm
a1 = back_sub_cpp(mmrsq, y)
a1 = back_sub_cpp(mmrsq, matrix(y))
a1
a2 = back_sub_cpp(mmrsq, matrix(y[1:5]))
a2
a3 = back_sub_cpp(mmr, matrix(y[1:5]))
a3
a4 = back_sub_cpp(mmr, matrix(y))
a4
sourceCpp("lm_cpp.cpp")
csol = lm_cpp(mm, y)
csol
mm %*% y
mm %*% csol
y
mean(mm %*% y)
mean(mm %*% csol)
lm(x = mm, y = y)
mmdf = as.data.frame(mm)
names(mm)
names(mmdf)
lm(y ~ mmdf$V1 + mmdf$V2 + mmdf$V3 + mmdf$V4 + mmdf$V5)
csol
aa = lm(y ~ mmdf$V1 + mmdf$V2 + mmdf$V3 + mmdf$V4 + mmdf$V5)
aa$qr %>% class
aa$qr %>% qr.Q()
qr_cpp(mm)
aa = lm(y ~ 0 + mmdf$V1 + mmdf$V2 + mmdf$V3 + mmdf$V4 + mmdf$V5)
lm(y ~ 0 + mmdf$V1 + mmdf$V2 + mmdf$V3 + mmdf$V4 + mmdf$V5)
csol
qr_cpp(mm)
qr_cpp(mm[1:5,])
mml[lower.tri(mm)] = 0
library(Rcpp)
library(magrittr)
sourceCpp("lm_cpp.cpp")
sourceCpp("back_sub_cpp.cpp")
mm = matrix(runif(50), ncol = 5)
y = 1:10
mmr = mm
mmr[lower.tri(mm)] = 0
mml[lower.tri(mm)] = 0
mml[upper.tri(mm)] = 0
mml = mm
mmr[lower.tri(mm)] = 0
mml[upper.tri(mm)] = 0
mml
mmlsq = mmr[1:ncol(mm),]
b1 = back_sub_cpp(mmlsq, matrix(y))
b2 = back_sub_cpp(mmlsq, matrix(y[1:5]))
b3 = back_sub_cpp(mml, matrix(y[1:5]))
b4 = back_sub_cpp(mml, matrix(y))
b1
b2
b3
b4
b5
mml
mmlsq
mmlsq = mml[1:ncol(mm),]
mmlsq = mml[1:ncol(mm),]
mmlsq
mml
mmlsq = mml[1:ncol(mm),]
b1 = forw_sub_cpp(mmlsq, matrix(y))
b2 = forw_sub_cpp(mmlsq, matrix(y[1:5]))
b3 = forw_sub_cpp(mml, matrix(y[1:5]))
b4 = forw_sub_cpp(mml, matrix(y))
b1
b2
b3
b4
b5
