l2norm(2:5)
l2norm(3:4)
l2norm(c(5,12))
x
l2norm(x)
l2norm(householder_r(x)$x_reflec)
l2norm(householder2_r(x)$x_reflec)
l2norm = function(x) sqrt(sum(x^2))
householder_r = function(x, u){
P = diag(1,nrow = length(u)) - 2*(matrix(u) %*% t(matrix(u)))
return(list(P=P, x_reflec = P %*% matrix(x)))
}
householder2_r = function(x){
u = x - l2norm(x)*c(1,rep(0,length(x)-1))
u = u/l2norm(u)
householder_r(x, u)
}
householder_r = function(x, u){
P = diag(1,nrow = length(u)) - 2*(matrix(u) %*% t(matrix(u)))
return(list(P=P, x_reflec = P %*% matrix(x)))
}
householder2_r = function(x){
l2norm = function(x) sqrt(sum(x^2))
u = x - l2norm(x)*c(1,rep(0,length(x)-1))
u = u/l2norm(u)
householder_r(x, u)
}
qr_r = function(A){
qs = list()
as = list()
n = ncol(A)
m = nrow(A)
for(i in 1:(n - 1)){
qs[[i]] = diag(1, nrow = m)
qs[[i]][i:m,i:m] = householder2_r(A[i:m,i])$P
A = qs[[i]] %*% A
}
}
set.seed(4)
A = matrix(rnorm(500), ncol = 10)
qs = list()
as = list()
n = ncol(A)
m = nrow(A)
for(i in 1:(n - 1)){
qs[[i]] = diag(1, nrow = m)
qs[[i]][i:m,i:m] = householder2_r(A[i:m,i])$P
A = qs[[i]] %*% A
}
A
set.seed(4)
A = matrix(rnorm(500), ncol = 10)
qs = list()
as = list()
n = ncol(A)
m = nrow(A)
for(i in 1:(n)){
qs[[i]] = diag(1, nrow = m)
qs[[i]][i:m,i:m] = householder2_r(A[i:m,i])$P
A = qs[[i]] %*% A
}
A
qs[[1]]
qs[[9]]
qr_r = function(A){
qs = list()
as = list()
n = ncol(A)
m = nrow(A)
for(i in 1:(n)){
qs[[i]] = diag(1, nrow = m)
qs[[i]][i:m,i:m] = householder2_r(A[i:m,i])$P
A = qs[[i]] %*% A
}
q = qs[[n]]
for(i in 1:(n-1)){
q = q %*% q[[i]]
}
}
set.seed(4)
A = matrix(rnorm(500), ncol = 10)
qr_r = function(A){
qs = list()
as = list()
n = ncol(A)
m = nrow(A)
for(i in 1:(n)){
qs[[i]] = diag(1, nrow = m)
qs[[i]][i:m,i:m] = householder2_r(A[i:m,i])$P
A = qs[[i]] %*% A
}
q = qs[[n]]
for(i in 1:(n-1)){
q = q %*% q[[i]]
}
return(list(q = q, r = A))
}
set.seed(4)
A = matrix(rnorm(500), ncol = 10)
myqr = qr_r(A)
qr_r = function(A){
qs = list()
as = list()
n = ncol(A)
m = nrow(A)
for(i in 1:(n)){
qs[[i]] = diag(1, nrow = m)
qs[[i]][i:m,i:m] = householder2_r(A[i:m,i])$P
A = qs[[i]] %*% A
}
q = qs[[n]]
for(i in 1:(n-1)){
q = q %*% qs[[i]]
}
return(list(q = q, r = A))
}
set.seed(4)
A = matrix(rnorm(500), ncol = 10)
myqr = qr_r(A)
myqr$q
myqr$q %>% dim
myqr$r %>% dim
norm(A - myqr$q %*% myqr$r, "F")
norm(A - matrix(mean(A), nrow =nrow(A), ncol=ncol(A)), "F")
householder_r = function(x, u){
P = diag(1,nrow = length(u)) - 2*(matrix(u) %*% t(matrix(u)))
return(list(P=P, x_reflec = P %*% matrix(x)))
}
householder2_r = function(x){
l2norm = function(x) sqrt(sum(x^2))
u = x - l2norm(x)*c(1,rep(0,length(x)-1))
u = u/l2norm(u)
householder_r(x, u)
}
qr_r = function(A){
qs = list()
as = list()
n = ncol(A)
m = nrow(A)
for(i in 1:(n)){
qs[[i]] = diag(1, nrow = m)
qs[[i]][i:m,i:m] = householder2_r(A[i:m,i])$P
A = qs[[i]] %*% A
}
q = qs[[n]]
for(i in 1:(n-1)){
q = q %*% qs[[i]]
}
return(list(q = t(q), r = A))
}
set.seed(4)
A = matrix(rnorm(500), ncol = 10)
myqr = qr_r(A)
norm(A - myqr$q %*% myqr$r, "F")
qr_r = function(A){
qs = list()
as = list()
n = ncol(A)
m = nrow(A)
for(i in 1:(n)){
qs[[i]] = diag(1, nrow = m)
qs[[i]][i:m,i:m] = householder2_r(A[i:m,i])$P
A = qs[[i]] %*% A
}
q = qs[[n]]
for(i in 1:(n-1)){
q = q %*% qs[[i]]
}
return(list(q = (q), r = A))
}
set.seed(4)
A = matrix(rnorm(500), ncol = 10)
myqr = qr_r(A)
norm(A - myqr$q %*% myqr$r, "F")
qr_r = function(A){
qs = list()
as = list()
n = ncol(A)
m = nrow(A)
for(i in 1:(n)){
qs[[i]] = diag(1, nrow = m)
qs[[i]][i:m,i:m] = householder2_r(A[i:m,i])$P
A = qs[[i]] %*% A
}
q = qs[[n]]
for(i in 1:(n-1)){
q = q %*% qs[[i]]
}
return(list(q = t(q), r = A))
}
set.seed(4)
A = matrix(rnorm(500), ncol = 10)
myqr = qr_r(A)
norm(A - myqr$q %*% myqr$r, "F")
A
set.seed(4)
A = matrix(rnorm(50), ncol = 5)
myqr = qr_r(A)
norm(A - myqr$q %*% myqr$r, "F")
A
myqr$q
myqr$q %*% t(myqr$q)
myqr$r
qr_r = function(A){
qs = list()
as = list()
n = ncol(A)
m = nrow(A)
for(i in 1:(n)){
qs[[i]] = diag(1, nrow = m)
qs[[i]][i:m,i:m] = householder2_r(A[i:m,i])$P
A = qs[[i]] %*% A
}
q = qs[[n]]
for(i in 1:(n-1)){
q = q %*% qs[[i]]
}
r[lower.tri(r)] = 0
return(list(q = t(q), r = A))
}
set.seed(4)
A = matrix(rnorm(50), ncol = 5)
myqr = qr_r(A)
norm(A - myqr$q %*% myqr$r, "F")
qr_r = function(A){
qs = list()
as = list()
n = ncol(A)
m = nrow(A)
for(i in 1:(n)){
qs[[i]] = diag(1, nrow = m)
qs[[i]][i:m,i:m] = householder2_r(A[i:m,i])$P
A = qs[[i]] %*% A
}
q = qs[[n]]
for(i in 1:(n-1)){
q = q %*% qs[[i]]
}
A[lower.tri(A)] = 0
return(list(q = t(q), r = A))
}
set.seed(4)
A = matrix(rnorm(50), ncol = 5)
myqr = qr_r(A)
norm(A - myqr$q %*% myqr$r, "F")
myqr$r
i=1
set.seed(4)
A = matrix(rnorm(50), ncol = 5)
qs = list()
as = list()
n = ncol(A)
m = nrow(A)
qs[[i]] = diag(1, nrow = m)
qs[[i]][i:m,i:m] = householder2_r(A[i:m,i])$P
A = qs[[i]] %*% A
qs[[1]]
A
i=2
qs[[i]] = diag(1, nrow = m)
qs[[i]][i:m,i:m] = householder2_r(A[i:m,i])$P
A = qs[[i]] %*% A
A
A=3
qs[[i]] = diag(1, nrow = m)
qs[[i]][i:m,i:m] = householder2_r(A[i:m,i])$P
A = qs[[i]] %*% A
set.seed(4)
A = matrix(rnorm(50), ncol = 5)
myqr = qr_r(A)
norm(A - myqr$q %*% myqr$r, "F")
i=1
qs[[i]] = diag(1, nrow = m)
qs[[i]][i:m,i:m] = householder2_r(A[i:m,i])$P
A = qs[[i]] %*% A
A
i=i+1
qs[[i]] = diag(1, nrow = m)
qs[[i]][i:m,i:m] = householder2_r(A[i:m,i])$P
A = qs[[i]] %*% A
i=i+1
A
i
qs[[i]] = diag(1, nrow = m)
qs[[i]][i:m,i:m] = householder2_r(A[i:m,i])$P
A = qs[[i]] %*% A
A
i=4
qs[[i]] = diag(1, nrow = m)
qs[[i]][i:m,i:m] = householder2_r(A[i:m,i])$P
A = qs[[i]] %*% A
A
i=5
qs[[i]] = diag(1, nrow = m)
qs[[i]][i:m,i:m] = householder2_r(A[i:m,i])$P
A = qs[[i]] %*% A
A
set.seed(4)
A = matrix(rnorm(50), ncol = 5)
A2 = A
set.seed(4)
A = matrix(rnorm(50), ncol = 5)
A2 = A
myqr = qr_r(A)
norm(A - (myqr$q %*% myqr$r), "F")
i=1
qs[[i]] = diag(1, nrow = m)
qs[[i]]
qs[[i]][i:m,i:m] = householder2_r(A[i:m,i])$P
qs[[i]]
A = qs[[i]] %*% A
A
norm(A2 - (t(q[[i]]) %*% A), "F")
norm(A2 - (t(qs[[i]]) %*% A), "F")
i=2
qs[[i]] = diag(1, nrow = m)
qs[[i]][i:m,i:m] = householder2_r(A[i:m,i])$P
A = qs[[i]] %*% A
norm(A2 - (t(qs[[i]]) %*% A), "F")
norm(A2 - (t(qs[[2]] %*% qs[[1]]) %*% A), "F")
qr_r = function(A){
qs = list()
as = list()
n = ncol(A)
m = nrow(A)
for(i in 1:(n)){
qs[[i]] = diag(1, nrow = m)
qs[[i]][i:m,i:m] = householder2_r(A[i:m,i])$P
A = qs[[i]] %*% A
}
q = qs[[n]]
for(i in (n-1):1){
q = q %*% qs[[i]]
}
A[lower.tri(A)] = 0
return(list(q = t(q), r = A))
}
set.seed(4)
A = matrix(rnorm(50), ncol = 5)
A2 = A
myqr = qr_r(A)
norm(A - (myqr$q %*% myqr$r), "F")
# qr_decomposition_r
source("qr_r.R")
set.seed(4)
mat = matrix(rnorm(50000), ncol = 100, nrow = 500)
# qr_decomposition_r
source("qr_r.R")
set.seed(4)
mat = matrix(rnorm(50000), ncol = 100, nrow = 500)
myqr = qr_r(mat)
norm(mat - (myqr$q %*% myqr$r), "F")
?qr
small_mat = matrix(rnorm(500), ncol = 10, nrow = 50)
qrsm = qr(small_mat)
qrsm$qr
myqr$q
myqr$r
qr.coef(qrsm)
qr.q(qrsm)
qr.Q(qrsm)
qr.R(qrsm)
#base::qr ----
set.seed(4)
mat = matrix(rnorm(50000), ncol = 100, nrow = 500)
myqr = qr(mat)
norm(mat - (qr.Q(mat) %*% qr.R(mat)), "F")
#base::qr ----
set.seed(4)
mat = matrix(rnorm(50000), ncol = 100, nrow = 500)
myqr = qr(mat)
norm(mat - (qr.Q(myqr) %*% qr.R(myqr)), "F")
#qr_decomposition_r ----
source("qr_r.R")
set.seed(4)
mat = matrix(rnorm(50000), ncol = 100, nrow = 500)
myqr = qr_r(mat)
norm(mat - (myqr$q %*% myqr$r), "F")
mat = matrix(rnorm(50000), ncol = 100, nrow = 500)
myqr = qr(mat)
norm(mat - (qr.Q(myqr) %*% qr.R(myqr)), "F")
#qr_decomposition_r ----
source("qr_r.R")
set.seed(4)
mat = matrix(rnorm(50000), ncol = 100, nrow = 500)
myqr = qr_r(mat)
norm(mat - (myqr$q %*% myqr$r), "F")
set.seed(4)
mat = matrix(rnorm(50000), ncol = 100, nrow = 500)
myqr = qr_r(mat)
norm(mat - (myqr$q %*% myqr$r), "F")
mat = matrix(rnorm(50000), ncol = 100, nrow = 500)
myqr = qr_r(mat)
norm(mat - (myqr$q %*% myqr$r), "F")
#qr_decomposition_r ----
source("qr_r.R")
set.seed(4)
mat = matrix(rnorm(50000), ncol = 100, nrow = 500)
myqr = qr_r(mat)
norm(mat - (myqr$q %*% myqr$r), "F")
source("qr_r.R")
set.seed(4)
mat = matrix(rnorm(50000), ncol = 100, nrow = 500)
myqr = qr_r(mat)
norm(mat - (myqr$q %*% myqr$r), "F")
A = mat
q = diag(1,nrow = m, ncol = m)
n = ncol(A)
m = nrow(A)
#qr_decomposition_r ----
source("qr_r.R")
set.seed(4)
mat = matrix(rnorm(50000), ncol = 100, nrow = 500)
myqr = qr_r(mat)
norm(mat - (myqr$q %*% myqr$r), "F")
library(Rcpp)
sourceCpp("householder_cpp.cpp")
householder_cpp(1,1)
householder_cpp(10,1)
householder_cpp(10,10)
sourceCpp("householder_cpp.cpp")
householder_cpp(10,10)
sourceCpp("householder_cpp.cpp")
householder_cpp(10,10)
householder_cpp(102,130)
sourceCpp("householder_cpp.cpp")
householder_cpp(102,130)
householder_cpp(1:4,4:5)
sourceCpp("householder_cpp.cpp")
householder_cpp(1:4,4:5)
sourceCpp("householder_cpp.cpp")
sourceCpp("householder_cpp.cpp")
householder_cpp(1:4,4:5)
householder_cpp(1:4,4:7)
sourceCpp("householder_cpp.cpp")
householder_cpp(1:4,4:7)
householder_r(1:4,4:7)
householder_r = function(x, u){
P = diag(1,nrow = length(u)) - 2*(matrix(u) %*% t(matrix(u)))
return(list(P=P, x_reflec = P %*% matrix(x)))
}
householder2_r = function(x){
l2norm = function(x) sqrt(sum(x^2))
u = x - l2norm(x)*c(1,rep(0,length(x)-1))
u = u/l2norm(u)
householder_r(x, u)
}
householder_r(1:4,4:7)
sourceCpp("householder_cpp.cpp")
householder_r(1:5)
householder2_r(1:5)
householder2_r(1:5)$P
householder2_cpp(1:5)$P
householder2_cpp(1:5)
// [[Rcpp::export]]
NumericMatrix householder2_cpp(NumericVector x){
NumericVector u = x;
u[0] = u[0] - l2norm(x);
return householder_cpp(x, u/l2norm(u));
}
sourceCpp("householder_cpp.cpp")
householder2_cpp(1:5)
sourceCpp("householder_cpp.cpp")
householder2_cpp(1:5)
householder2_r(1:5)$P
householder2_r(1:5)$P - householder2_cpp(1:5)
sourceCpp("qr_cpp.cpp")
sourceCpp("qr_cpp.cpp")
shh(1:10)
sourceCpp("qr_cpp.cpp")
shh(matrix(1:9,nrow=3))
shh(matrix(1:16,nrow=5))
shh(matrix(1:16,nrow=4))
sourceCpp("qr_cpp.cpp")
sourceCpp("qr_cpp.cpp")
shh(matrix(1:16,nrow=4))
sourceCpp("qr_cpp.cpp")
shh(matrix(1:16,nrow=4))
sourceCpp("qr_cpp.cpp")
shh(matrix(1:16,nrow=4))
sourceCpp("qr_cpp.cpp")
library(Rcpp)
library(magrittr)
library(microbenchmark)
#qr_decomposition_r ----
source("qr_r.R")
set.seed(4)
mat = matrix(rnorm(50000), ncol = 100, nrow = 500)
myqr = qr_r(mat)
norm(mat - (myqr$q %*% myqr$r), "F")
mat = matrix(rnorm(500), ncol = 10, nrow = 50)
myqr = qr_cpp(mat)
norm(mat - (myqr$q %*% myqr$r), "F")
#qr_decomposition_cpp ----
sourceCpp("qr_cpp.cpp")
set.seed(4)
mat = matrix(rnorm(500), ncol = 10, nrow = 50)
myqr = qr_cpp(mat)
norm(mat - (myqr$q %*% myqr$r), "F")
mat = matrix(rnorm(1000), ncol = 20, nrow = 50)
myqr = qr_cpp(mat)
norm(mat - (myqr$q %*% myqr$r), "F")
mat = matrix(rnorm(2000), ncol = 20, nrow = 100)
myqr = qr_cpp(mat)
norm(mat - (myqr$q %*% myqr$r), "F")
mat = matrix(rnorm(10000), ncol = 100, nrow = 100)
myqr = qr_cpp(mat)
norm(mat - (myqr$q %*% myqr$r), "F")
myqr$q
myqr$r
myqr$r %>% is.na %>% sum
myqr$q %>% is.na %>% sum
