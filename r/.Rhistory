mbc_df2[3:8,] %$% plot(n,base/n^3)
mbc_df2[3:8,] %$% plot(n,base/n^2)
mbc_df2[3:8,] %$% plot(n,r)
mbc_df2[3:8,] %$% plot(n,r^2)
mbc_df2[3:8,] %$% plot(n,r/n)
mbc_df2[3:8,] %$% plot(n,r/n^2)
mbc_df2[3:8,] %$% plot(n,r/n^3)
mbc_df2[3:8,] %$% plot(n,r/n^4)
?Reduce
u(m,1) * ut(1,m) * A(m,m)
u = 1:10
A = runif(100,10)
A
A = matrix(runif(100),10)
A
u
z = matrix(0,10,10)
z
u2 = matrix(u) %*% t(matrix(u))
u = 1:10
A = matrix(runif(100),10)
u2 = matrix(u) %*% t(matrix(u))
z = matrix(0,10,10)
for(i in 1:10){
for(j in 1:10){
for(k in 1:10){
z[i,j] = z[i,j] + u2[i,k]*u2[k,j]
}
}
}
z
z[i,j] = z[i,j] + u[i]*u[k]*u[k]*u[j]
u = 1:10
A = matrix(runif(100),10)
u2 = matrix(u) %*% t(matrix(u))
z = matrix(0,10,10)
for(i in 1:10){
for(j in 1:10){
for(k in 1:10){
z[i,j] = z[i,j] + u2[i,k]*u2[k,j]
}
}
}
z2 = matrix(0,10,10)
u = 1:10
A = matrix(runif(100),10)
u2 = matrix(u) %*% t(matrix(u))
z = matrix(0,10,10)
z2 = matrix(0,10,10)
for(i in 1:10){
for(j in 1:10){
for(k in 1:10){
z[i,j] = z[i,j] + u2[i,k]*u2[k,j]
}
}
}
for(i in 1:10){
for(j in 1:10){
for(k in 1:10){
z2[i,j] = z[i,j] + u[i]*u[k]*u[k]*u[j]
}
}
}
z-z2
u = 1:10
A = matrix(runif(100),10)
u2 = matrix(u) %*% t(matrix(u))
z = matrix(0,10,10)
z2 = matrix(0,10,10)
z
z2
for(i in 1:10){
for(j in 1:10){
for(k in 1:10){
z[i,j] = z[i,j] + u2[i,k]*u2[k,j]
}
}
}
z
for(i in 1:10){
for(j in 1:10){
for(k in 1:10){
z2[i,j] = z[i,j] + u[i]*u[k]*u[k]*u[j]
}
}
}
z2
z
u = 1:10
A = matrix(runif(100),10)
u2 = matrix(u) %*% t(matrix(u))
z = matrix(0,10,10)
z2 = matrix(0,10,10)
for(i in 1:10){
for(j in 1:10){
for(k in 1:10){
z[i,j] = z[i,j] + u2[i,k]*u2[k,j]
}
}
}
for(i in 1:10){
for(j in 1:10){
for(k in 1:10){
z2[i,j] = z2[i,j] + u[i]*u[k]*u[k]*u[j]
}
}
}
z2 - z
u(m,1) * ut(1,m) * A(m,m)
u2(m,m) * A(m,m)
m^3
u(m,1) * ut(1,m) * A(m,m)
m^2 + m^2
householder3_r = function(x){
l2norm = function(x) sqrt(sum(x^2))
u = x - l2norm(x)*c(1,rep(0,length(x)-1))
u = u/l2norm(u)
u
}
householder3_r(1:10)
householder3_r = function(x){
l2norm = function(x) sqrt(sum(x^2))
u = x - l2norm(x)*c(1,rep(0,length(x)-1))
u = u/l2norm(u)
u
}
qr_r = function(A){
n = ncol(A)
m = nrow(A)
q = diag(1,nrow = m, ncol = m)
for(i in 1:n){
u = householder3_r(A[i:m,i])
A[i:m,i:m] = A[i:m,i:m] - 2 * matrix(u) %*% (t(matrix(u)) %*% A[i:m,i:m])
q[i:m,i:m] = q[i:m,i:m] - 2 * matrix(u) %*% (t(matrix(u)) %*% q[i:m,i:m])
}
A[lower.tri(A)] = 0
return(list(q = t(q), r = A))
}
mm
mm = matrix(runif(16),4)
mm
ll = qr_r(mm)
ll$q
ll$r
qr_r = function(A){
n = ncol(A)
m = nrow(A)
q = diag(1,nrow = m, ncol = m)
for(i in 1:n){
u = householder3_r(A[i:m,i])
A[i:m,i:m] = A[i:m,i:m] - 2 * matrix(u) %*% (t(matrix(u)) %*% A[i:m,i:m])
q[i:m,i:m] = q[i:m,i:m] - 2 * matrix(u) %*% (t(matrix(u)) %*% q[i:m,i:m])
}
A[lower.tri(A)] = 0
return(list(q = t(q), r = A))
}
ll$r
ll = qr_r(mm)
ll$r
(ll$q %*% ll$r) - mm
ss = (ll$q %*% ll$r) - mm
ss
ss[ss<1e-5] = 0
ss
ss = (ll$q %*% ll$r) - mm
ss[ss<1e-5 & ss> - 1e-5] = 0
ss
ll$q %*% ll$r
mm
mm
ll
mm = matrix(runif(16),4)
mysol = qr_r(mm)
rsol = qr(mm)
rsol = list(q = qr.Q(rsol), qr.R(rsol))
mysol
rsol''
rsol
mysol$q + rsol$q
mysol$q + rsol$r
mm = matrix(runif(16),4)
mysol = qr_r(mm)
rsol = qr(mm)
rsol = list(q = qr.Q(rsol), r = qr.R(rsol))
mysol$r + rsol$r
qr_r = function(A){
n = ncol(A)
m = nrow(A)
q = diag(1,nrow = m, ncol = m)
for(i in 2:n){
u = householder3_r(A[i:m,i])
A[i:m,i:m] = A[i:m,i:m] - 2 * matrix(u) %*% (t(matrix(u)) %*% A[i:m,i:m])
q[i:m,i:m] = q[i:m,i:m] - 2 * matrix(u) %*% (t(matrix(u)) %*% q[i:m,i:m])
}
A[lower.tri(A)] = 0
return(list(q = t(q), r = A))
}
mm = matrix(runif(16),4)
mysol = qr_r(mm)
rsol = qr(mm)
rsol = list(q = qr.Q(rsol), r = qr.R(rsol))
mysol$q %*% mysol$r
mm
qr_r = function(A){
n = ncol(A)
m = nrow(A)
q = diag(1,nrow = m, ncol = m)
for(i in 1:(n-1)){
u = householder3_r(A[i:m,i])
A[i:m,i:m] = A[i:m,i:m] - 2 * matrix(u) %*% (t(matrix(u)) %*% A[i:m,i:m])
q[i:m,i:m] = q[i:m,i:m] - 2 * matrix(u) %*% (t(matrix(u)) %*% q[i:m,i:m])
}
A[lower.tri(A)] = 0
return(list(q = t(q), r = A))
}
mm = matrix(runif(16),4)
mysol = qr_r(mm)
rsol = qr(mm)
rsol = list(q = qr.Q(rsol), r = qr.R(rsol))
mysol$q %*% mysol$r
mm
mm - (mysol$q %*% mysol$r)
mysol$q - rsol$q
mysol$q + rsol$q
A = mm
n = ncol(A)
m = nrow(A)
q = diag(1,nrow = m, ncol = m)
q
A
u = householder3_r(A[i:m,i])
i = 1
u = householder3_r(A[i:m,i])
u
A
A[i:m,i:m] = A[i:m,i:m] - 2 * matrix(u) %*% (t(matrix(u)) %*% A[i:m,i:m])
A
q
q[i:m,i:m] = q[i:m,i:m] - 2 * matrix(u) %*% (t(matrix(u)) %*% q[i:m,i:m])
q
i = 2
u = householder3_r(A[i:m,i])
A[i:m,i:m] = A[i:m,i:m] - 2 * matrix(u) %*% (t(matrix(u)) %*% A[i:m,i:m])
A
i=3
u = householder3_r(A[i:m,i])
A[i:m,i:m] = A[i:m,i:m] - 2 * matrix(u) %*% (t(matrix(u)) %*% A[i:m,i:m])
A
qr_r = function(A){
n = ncol(A)
m = nrow(A)
q = diag(1,nrow = m, ncol = m)
for(i in 1:(n-1)){
u = householder3_r(A[i:m,i])
A[i:m,i:m] = A[i:m,i:m] - 2 * matrix(u) %*% (t(matrix(u)) %*% A[i:m,i:m])
q[i:m,i:m] = q[i:m,i:m] - 2 * matrix(u) %*% (t(matrix(u)) %*% q[i:m,i:m])
}
A[lower.tri(A)] = 0
return(list(q = t(q), r = A))
}
mm = matrix(runif(16),4)
mysol = qr_r(mm)
rsol = qr(mm)
rsol = list(q = qr.Q(rsol), r = qr.R(rsol))
rsol$r - mysol$r
qr_r = function(A){
n = ncol(A)
m = nrow(A)
q = diag(1,nrow = m, ncol = m)
for(i in 1:n){
u = householder3_r(A[i:m,i])
A[i:m,i:m] = A[i:m,i:m] - 2 * matrix(u) %*% (t(matrix(u)) %*% A[i:m,i:m])
q[i:m,i:m] = q[i:m,i:m] - 2 * matrix(u) %*% (t(matrix(u)) %*% q[i:m,i:m])
}
A[lower.tri(A)] = 0
return(list(q = t(q), r = A))
}
mm = matrix(runif(16),4)
mysol = qr_r(mm)
rsol = qr(mm)
rsol = list(q = qr.Q(rsol), r = qr.R(rsol))
mysol$r - rsol$r
mysol$r + rsol$r
i=1
n = ncol(A)
m = nrow(A)
q = diag(1,nrow = m, ncol = m)
q
u = householder3_r(A[i:m,i])
A[i:m,i:m] = A[i:m,i:m] - 2 * matrix(u) %*% (t(matrix(u)) %*% A[i:m,i:m])
q[i:m,i:m] = q[i:m,i:m] - 2 * matrix(u) %*% (t(matrix(u)) %*% q[i:m,i:m])
q
i
q[i:m,i:m] = q[i:m,i:m] - 2 * matrix(u) %*% (t(matrix(u)) %*% q[i:m,i:m])
q
q[i:m,i:m] = q[i:m,i:m] - 2 * matrix(u) %*% (t(matrix(u)) %*% q[i:m,i:m])
q
q[i:m,i:m]
n = ncol(A)
m = nrow(A)
q = diag(1,nrow = m, ncol = m)
u = householder3_r(A[i:m,i])
q[i:m,i:m] = q[i:m,i:m] - 2 * matrix(u) %*% (t(matrix(u)) %*% q[i:m,i:m])
q
mm
diag(m)
qr_r = function(A){
n = ncol(A)
m = nrow(A)
q = diag(1,nrow = m, ncol = m)
for(i in 1:n){
u = householder3_r(A[i:m,i])
A[i:m,i:m] = A[i:m,i:m] - 2 * matrix(u) %*% (t(matrix(u)) %*% A[i:m,i:m])
q = (diag(m) - 2 * matrix(u) %*% t(matrix(u))) %*% q
}
A[lower.tri(A)] = 0
return(list(q = t(q), r = A))
}
mm = matrix(runif(16),4)
mysol = qr_r(mm)
rsol = qr(mm)
u
A = mm
n = ncol(A)
m = nrow(A)
q = diag(1,nrow = m, ncol = m)
u = householder3_r(A[i:m,i])
A[i:m,i:m] = A[i:m,i:m] - 2 * matrix(u) %*% (t(matrix(u)) %*% A[i:m,i:m])
q = (diag(m) - 2 * matrix(u) %*% t(matrix(u))) %*% q
q
qr_r = function(A){
n = ncol(A)
m = nrow(A)
q = diag(1,nrow = m, ncol = m)
for(i in 1:n){
u = householder3_r(A[i:m,i])
A[i:m,i:m] = A[i:m,i:m] - 2 * matrix(u) %*% (t(matrix(u)) %*% A[i:m,i:m])
q = (diag(m) - 2 * matrix(u) %*% t(matrix(u))) %*% q
}
A[lower.tri(A)] = 0
return(list(q = t(q), r = A))
}
mm = matrix(runif(16),4)
mysol = qr_r(mm)
rsol = qr(mm)
qr_r = function(A){
n = ncol(A)
m = nrow(A)
q = diag(1,nrow = m, ncol = m)
for(i in 1:n){
u = householder3_r(A[i:m,i])
A[i:m,i:m] = A[i:m,i:m] - 2 * matrix(u) %*% (t(matrix(u)) %*% A[i:m,i:m])
q[i:m,] = q[i:m,] - 2 * matrix(u) %*% (t(matrix(u)) %*% q[i:m,])
}
A[lower.tri(A)] = 0
return(list(q = t(q), r = A))
}
mm = matrix(runif(16),4)
mysol = qr_r(mm)
rsol = qr(mm)
rsol = list(q = qr.Q(rsol), r = qr.R(rsol))
mysol$r - rsol$r
mysol$q - rsol$q
mysol$q + rsol$q
mysol$q %*% mysol$r
(mysol$q %*% mysol$r) - mm
((mysol$q %*% mysol$r) - mm) %>% norm("F")
#microbenchmarking qr ----
set.seed(42)
mbc = list()
nns = c(2:8)*100
ns = lapply(nns, function(z) matrix(rnorm(z^2), nrow = z) %>% (function(zz) zz %*% t(zz)))
for(i in 1:length(ns)){
print(i)
mat3 = ns[[i]]
mbc[[i]] = microbenchmark(qr(mat3), qr_r(mat3)) %>% summary
}
mbc_df = sapply(mbc, `[[`, "median") %>% t %>% cbind(nns,.) %>% as.data.frame %>% `names<-`(c("n", "base", "r"))
mbc_df2 = cbind(mbc_df, sapply(mbc_df[,-1], function(z) z/(mbc_df$n^2)))
names(mbc_df2) = c("n",'base','r','base_adj','r_adj')
mbc_df2
mbc_df2$r/mbc_df2$base
#microbenchmarking qr ----
set.seed(42)
mbc = list()
nns = c(2:18)*10
ns = lapply(nns, function(z) matrix(rnorm(z^2), nrow = z) %>% (function(zz) zz %*% t(zz)))
for(i in 1:length(ns)){
print(i)
mat3 = ns[[i]]
mbc[[i]] = microbenchmark(qr(mat3), qr_r(mat3)) %>% summary
}
mbc_df = sapply(mbc, `[[`, "median") %>% t %>% cbind(nns,.) %>% as.data.frame %>% `names<-`(c("n", "base", "r"))
mbc_df2 = cbind(mbc_df, sapply(mbc_df[,-1], function(z) z/(mbc_df$n^2)))
names(mbc_df2) = c("n",'base','r','base_adj','r_adj')
mbc_df2
mbc_df2$r/mbc_df2$base
sourceCpp("qr_cpp.cpp")
library(Rcpp)
sourceCpp("qr_cpp.cpp")
mm = matrix(runif(20),5)
csol = qr_cpp(mm)
cans = csol$q %*% csol$r
cdif = mm - cans
cdif
csol$q
csol$r
sourceCpp("qr_cpp.cpp")
mm = matrix(runif(20),5)
csol = qr_cpp(mm)
cans = csol$q %*% csol$r
cdif = mm - cans
csol$r
library(Rcpp)
sourceCpp("qr_cpp.cpp")
mm = matrix(runif(20),5)
csol = qr_cpp(mm)
cans = csol$q %*% csol$r
cdif = mm - cans
csol$r
library(Rcpp)
sourceCpp("qr_cpp.cpp")
mm = matrix(runif(20),5)
csol = qr_cpp(mm)
cans = csol$q %*% csol$r
cdif = mm - cans
csol$r
library(Rcpp)
sourceCpp("qr_cpp.cpp")
mm = matrix(runif(20),5)
csol = qr_cpp(mm)
cans = csol$q %*% csol$r
cdif = mm - cans
csol$r
library(Rcpp)
sourceCpp("qr_cpp.cpp")
mm = matrix(runif(20),5)
csol = qr_cpp(mm)
cans = csol$q %*% csol$r
cdif = mm - cans
csol$r
}
return List::create(Named("q") = transpose(q) , Named("r") = A);
}
library(Rcpp)
sourceCpp("qr_cpp.cpp")
mm = matrix(runif(20),5)
csol = qr_cpp(mm)
cans = csol$q %*% csol$r
cdif = mm - cans
cdif
csol$r
csol$q
cans
mm
mm = matrix(runif(20),5)
csol = qr_cpp(mm)
mm
mm = matrix(runif(20),5)
mm
csol = qr_cpp(mm)
mm
mm = matrix(runif(20),5)
csol = qr_cpp(mm)
cans = csol$q %*% csol$r
cdif = mm - cans
cdif
csol$r
library(Rcpp)
sourceCpp("qr_cpp.cpp")
mm = matrix(runif(20),5)
csol = qr_cpp(mm)
cans = csol$q %*% csol$r
cdif = mm - cans
cdif
cans
csol$q
csol$r
mm = matrix(runif(25),5)
csol = qr_cpp(mm)
cans = csol$q %*% csol$r
cdif = mm - cans
cdif
mm = matrix(runif(20),5)
csol = qr_cpp(mm)
cans = csol$q %*% csol$r
cdif = mm - cans
cdif
csol$r
mm = matrix(runif(25),5)
csol = qr_cpp(mm)
cans = csol$q %*% csol$r
cdif = mm - cans
cdif
csol$q
csol$r
library(Rcpp)
sourceCpp("qr_cpp.cpp")
mm = matrix(runif(25),5)
csol = qr_cpp(mm)
cans = csol$q %*% csol$r
cdif = mm - cans
csol$r
csol$q
library(Rcpp)
sourceCpp("qr_cpp.cpp")
mm = matrix(runif(35),7)
csol = qr_cpp(mm)
cans = csol$q %*% csol$r
cdif = mm - cans
csol$r
cdif
